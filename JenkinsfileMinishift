#!groovyâ€‹


final NEXUS_REPO = 'alm-demo'

stage('Build') {
    node {
        checkout scm 
        withEnv(["PATH+MAVEN=${tool 'm3'}/bin"]) {
            def pom = readMavenPom file: 'pom.xml'
            sh "mvn -B versions:set -DnewVersion=${pom.version}-${BUILD_NUMBER}"
            sh "mvn -B -Dmaven.test.skip=true clean package"
            stash name: "artifact", includes: "target/soccer-stats-*.jar"
        }
    }
}


stage('Unit Tests') {   
    node {
        withEnv(["PATH+MAVEN=${tool 'm3'}/bin"]) {
            sh "mvn -B clean test"
            stash name: "unit_tests", includes: "target/surefire-reports/**"
        }
    }
}

/*
stage('Integration Tests') {
    node {
        withEnv(["PATH+MAVEN=${tool 'm3'}/bin"]) {
            sh "mvn -B clean verify -Dsurefire.skip=true"
            stash name: 'it_tests', includes: 'target/failsafe-reports/**'
        }
    }
}
*/

stage('Static Analysis') {
    node {
        withEnv(["PATH+MAVEN=${tool 'm3'}/bin"]) {
            withSonarQubeEnv('sonar'){
               // unstash 'it_tests'
                unstash 'unit_tests'
                sh 'mvn sonar:sonar -DskipTests'
            }
        }
    }
}

stage('Approval') {
    timeout(time:3, unit:'DAYS') {
        input 'Do I have your approval for deployment?'
    }
}

stage('Artifact Upload') {
    node {
        unstash 'artifact'

        def pom = readMavenPom file: 'pom.xml'
        def file = "${pom.artifactId}-${pom.version}"
        def jar = "target/${file}.jar"

        sh "cp pom.xml ${file}.pom"

        nexusArtifactUploader artifacts: [
                [artifactId: "${pom.artifactId}", classifier: '', file: "target/${file}.jar", type: 'jar'],
                [artifactId: "${pom.artifactId}", classifier: '', file: "${file}.pom", type: 'pom']
            ], 
            credentialsId: 'nexus', 
            groupId: "${pom.groupId}", 
            nexusUrl: NEXUS_URL, 
            nexusVersion: 'nexus3', 
            protocol: 'http', 
            repository: NEXUS_REPO, 
            version: "${pom.version}"        
    }
}

stage('Build Image') {
    node {
        unstash name:"artifact"
        def pom = readMavenPom file: "pom.xml"
        def repoPath =  "${pom.groupId}".replace(".", "/") + 
                        "/${pom.artifactId}"

        def version = pom.version
        sh "oc start-build soccer-stats --from-file=target/${pom.artifactId}-${version}.jar --follow"
    }
}

stage('Deploy') {
    node {
        openshiftDeploy depCfg: 'soccer-stats'
        openshiftVerifyDeployment depCfg: 'soccer-stats', replicaCount: 1, verifyReplicaCount: true
    }
}